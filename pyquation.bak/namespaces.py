from .Modifier import Modifier
from .Unit import Unit
from .Namespace import Namespace

from sympy.physics.units.systems.si import SI
from sympy.physics.units import Unit
from sympy.physics.units import *
import sympy as sp
from copy import copy

# base = copy(sp.__dict__)
# base.update({
#     '_i': sp.I,
#     '_e': sp.E,
# })

# physics = base.copy()
# physics.update({
#     'a':       meters/second**2,
#     'v':       meters/second,
#     'r':       meters,
#     'angA':    radians/second**2,
#     'angV':    radians/second,
#     'angs':    radians/second,
#     'dang':    radians/second,
#     'dang':    radians,
#     'dt':      S('delta time') * seconds,
#     'w':             'weight', 'Newtons',
#     'W':             'work', 'Joules',
#     'm':             'mass', 'kilograms',
#     'b':             'NO idea',
#     'f':             'force', 'Newtons',
#     'R':             'drag force', 'Newtons',
#     'vlin':          'linear (tangential) velocity', 'meters/second',
#     'ke':            'kinetic energy', 'Joules',
#     'peg':           'potential energy due to gravity', 'Joules',
#     'pes':           'potential energy in a spring', 'Joules',
#     'pec':           'potential energy due to... the centripetal force?', 'Joules',
#     'g':             'gravity acceleration', 'meters/second^2',
#     'h':             'height', 'meters',
#     'x':             'x', 'meters',
#     'k':             'the spring\'s constant', 'Newtons/meter',
#     'te':            'total energy', 'Joules',
#     'ke':            'kenetic energy', 'Joules',
#     'pe':            'potential energy', 'Joules',
#     'T':             'Period', 'revolutions/second',
#     't':             'time', 'seconds',
#     'pos':           'position', 'meters?',
#     'mag':           'vector magnitude',
#     'me':            "Mechanical Energy", 'Joules',
#     'wdaf':          '"Work Done Against Friction"',
#     'P':             'Power', 'watts',
#     'p':             'Momentum', 'kilogram meters/second',
#     'ker':           'rotational kinetic energy', 'Joules',
#     'd':             'displacement', 'meters',
#     'D':             'distance', 'meters',
#     'vec':           'generic position vector',
#     'mu_k':          'coefficent of kinetic friction',
#     'mu_s':          'coefficent of static friction',
#     'N':             'Magnitude of the normal force', 'Newtons',
#     'imp':           'Impulse', 'Newton seconds',
#     'I':             'moment of inertia', 'kilogram meters^2',
#     'f_avg':         'average force over time',
#     'tau':           'torque', 'Newton meters',
#     'kew':           'kinetic energy in a flywheel', 'Joules',
#     'L':             'Angular Momentum', 'kilogram meters^2/second',
#     'G':             'Gravitational Constant', 'Newtons * meters/kilograms^2',
#     'v_esc':         'Escape velocity', 'meters/second', {'v_o', 'escv', 'esc_v'},
#     'M_E':           'mass of the earth (or the body in question) (5.98*10^24 kg)', 'kilograms',
#     'R_E':           'radius of the earth (or the body in question) (6.37*10^6 m)', 'meters',
#     'M_S':           'Mass of the sun (or body in question)', 'kilograms',
#     'sma':           'semi-major axis (smallest radius of an ellipse)', 'meters',
#     'ma':            'major axis (largest radius of an ellipse)', 'meters',
# })

physics = Namespace((
        Unit('a',    'acceleration', 'meters/second^2'),
        Unit('v',    'velocity', 'meters/second'),
        Unit('r',    'radius', 'meters'),
        Unit('angA', 'angular acceleration', 'radians/second^2'),
        Unit('angV', 'angular velocity', 'radians/second', {'wThing', 'ohmega'}),
        Unit('angs', 'angular speed', 'radians/second', {'aThing', 'alpha'}),
        Unit('dangs' 'delta anglular speed', 'radians/second'),
        Unit('dang', 'delta angle', 'radians'),
        Unit('dt',   'delta time', 'seconds'),
        Unit('w',    'weight', 'Newtons'),
        Unit('W',    'work', 'Joules'),
        Unit('m',    'mass', 'kilograms'),
        Unit('b',    'NO idea'),
        Unit('f',    'force', 'Newtons'),
        Unit('R',    'drag force', 'Newtons'),
        Unit('vlin', 'linear (tangential) velocity', 'meters/second'),
        Unit('ke',   'kinetic energy', 'Joules'),
        Unit('peg',  'potential energy due to gravity', 'Joules'),
        Unit('pes',  'potential energy in a spring', 'Joules'),
        Unit('pec',  'potential energy due to... the centripetal force?', 'Joules'),
        Unit('g',    'gravity acceleration', 'meters/second^2'),
        Unit('h',    'height', 'meters'),
        Unit('x',    'x', 'meters'),
        Unit('k',    'the spring\'s constant', 'Newtons/meter'),
        Unit('te',   'total energy', 'Joules'),
        Unit('ke',   'kenetic energy', 'Joules'),
        Unit('pe',   'potential energy', 'Joules'),
        Unit('T',    'Period', 'revolutions/second'),
        Unit('t',    'time', 'seconds'),
        Unit('pos',  'position', 'meters?'),
        Unit('mag',  'vector magnitude'),
        Unit('me',   "Mechanical Energy", 'Joules'),
        Unit('wdaf', '"Work Done Against Friction"'),
        Unit('P',    'Power', 'watts'),
        Unit('p',    'Momentum', 'kilogram meters/second'),
        Unit('ker',  'rotational kinetic energy', 'Joules'),
        Unit('d',    'displacement', 'meters'),
        Unit('D',    'distance', 'meters'),
        Unit('vec',  'generic position vector'),
        Unit('mu_k', 'coefficent of kinetic friction'),
        Unit('mu_s', 'coefficent of static friction'),
        Unit('N',    'Magnitude of the normal force', 'Newtons'),
        Unit('imp',  'Impulse', 'Newton seconds'),
        Unit('I',    'moment of inertia', 'kilogram meters^2'),
        Unit('f_avg','average force over time'),
        Unit('tau',  'torque', 'Newton meters'),
        Unit('kew',  'kinetic energy in a flywheel', 'Joules'),
        Unit('L',    'Angular Momentum', 'kilogram meters^2/second'),
        Unit('G',     'Gravitational Constant', 'Newtons * meters/kilograms^2'),
        Unit('v_esc', 'Escape velocity', 'meters/second', {'v_o', 'escv', 'esc_v'}),
        Unit('M_E',  'mass of the earth (or the body in question) (5.98*10^24 kg)', 'kilograms'),
        Unit('R_E',  'radius of the earth (or the body in question) (6.37*10^6 m)', 'meters'),
        Unit('M_S',  'Mass of the sun (or body in question)', 'kilograms'),
        Unit('sma',  'semi-major axis (smallest radius of an ellipse)', 'meters'),
        Unit('ma',  'major axis (largest radius of an ellipse)', 'meters'),
        # Unit(# 'f', 'frequency', 'Hertz'),
    ), modifiers=(
        Modifier('_i', 'initial'),
        Modifier('_f', 'final'),
        Modifier('d', 'delta', False),
        Modifier('_t', 'at time t'),
    )
)

electronics = Namespace((
        Unit('v',        'voltage', 'volts'),
        Unit('i',        'current', 'amps'),
        Unit('r',        'resistance', 'ohms'),
        Unit('p',        'power', 'watts'),
        Unit('G',        'conductance', 'Seimanns'),
        Unit('Gn',       'conductance of a given resistor'),
        Unit('iGn',      'current through a given resistor'),
        Unit('vL',       'induced voltage', 'volts'),
        Unit('Av',       'Voltage Gain', 'volts'),
        Unit('C',        'capacitance', 'farads'),
        Unit('q',        'charge'),
        Unit('d',        'distance between the capacitor plates'),
        Unit('mu',       'permeability'),
        Unit('Œµr',       'relative permittivity for the medium'),
        Unit('Œµ0',       'permittivity of space (constant, equal to 8.854x10-12 F/m)'),
        Unit('w',        'energy', 'joules'),
        Unit('phi',      'magnetic flux', 'teslas (Webers / meter)'),
        Unit('t',        'time', 'seconds'),
        Unit('L',        'inductance', 'Henrys'),
        Unit('N',        'number of turns of the wire'),
        Unit('W',        'Work', 'Joules'),
        Unit('tc',       'time constant'),
        Unit('vL_t',     'induced voltage at time t -- vL(t)'),
        Unit('v_t',      'voltage at time t -- v(t)'),
        Unit('i_t',      'current at time t -- i(t)'),
        Unit('f',        'frequency', 'Hertz'),
        Unit('ph',       'phase shift'),
        Unit('ohmega',   'angular frequency', 'radians/second', {'wThing'}),
        Unit('T',        'Period', 'revolutions/second'),
        Unit('j',        'i (sqrt(-1))'),
        Unit('phaseAng', 'the phase angle', 'radians'),
        Unit('Z',        'impedance'),
        Unit('X',        'reactance'),
        Unit('Y',        'admittance', 'Seimenns'),
        Unit('B',        'suceptance', '1/reactance'),
        Unit('phV_s',    'AC current source phasor'),
        Unit('I_D',      "Diode Current"),
        Unit('I_S',      "Diode reverse Saturation Current"),
        Unit('V_D',      "Voltage applied to the diode"),
        Unit('V_T',      'Thermovoltage'),
        Unit('k',        'Boltzmann\'s constant'),
        Unit('temp',     'Temperature', 'Kelvin'),
        # Unit('ùëí',        'Elementary Charge constant', 'Coulombs', psuedonyms={'elemC', 'elem', 'elementaryCharge'})
        Unit('elemC',        'Elementary Charge constant', 'Coulombs', psuedonyms={'elemC', 'elem', 'elementaryCharge', 'ùëí'})
        # Unit('G',        'conductance'),


        # 'Rf': 'the resistor connecting the op amp Vout and the op amp negative in terminals',
        # 'Rin': 'the resistor between Vin and the op amp negative in',
        # 'A': 'surface area of each capacitor plate',
    ), modifiers=(
        Modifier('_p', 'primary'),
        Modifier('_s', 'secondary'),
        Modifier('eq', 'equivalent'),
        Modifier('_C', ' through capacitor C'),
        Modifier('_L', ' through inductor L'),
        Modifier('_R', ' through resistor R'),
        Modifier('_in', 'in'),
        Modifier('_out', 'out'),
        Modifier('ph', 'phasor', False),
        Modifier('_m', 'peak'),
    )
)

waves = Namespace((
    Unit('y_t', 'the amplitude (y value) of the wave at time t'),
    Unit('t', 'time'),
    Unit('A', 'amplitude'),
    Unit('k', 'the wavenumber (spatial frequency)'),
    Unit('x', 'the x offset'),
    Unit('y', 'the y offset'),
    Unit('phi', 'phase angle'),
    Unit('k', 'wavenumber (spatial frequency)'),
    Unit('angF', 'angular frequency', psuedonyms={'ohmega', 'angf'}),
    Unit('f', 'frequency'),
    Unit('T', 'period'),
))

fundamentalMath = Namespace((
    Unit('c', 'circumerence of a circle'),
    Unit('r', 'radius'),
    Unit('A', 'area'),
))

multivariableCalculus = fundamentalMath.child({
    'objectDim': 'Dimension of the object',
    'vars': 'number of variables',
    'numEqu': 'number of equations',
})

logic = electronics.child((
    Unit('t_comb', 'Time the combonational logic takes to complete', 'seconds'),
    Unit('t_hold', 'The min time from clk posedge to signal negedge i.e. the min amount of time the signal has to be held after the clk posedge', 'seconds'),
    Unit('t_setup', 'The min time from signal posedge to clk posedge i.e. min time data must be present prior to clk posedge', 'seconds'),
    Unit('t_clk2q', 'The min time from clk posedge till the combinational logic has an output which is stable i.e. delay from clk posedge till flip-flop out', 'seconds'),
    Unit('f_max', 'maximum frequency allowed in the circuit', 'Hz'),
    Unit('T', 'Clock period', 'seconds'),
    Unit('f', 'Clock frequency', 'Hz'),
))

chemistry = Namespace((
    Unit('Œª', 'Wavelength', psuedonyms={'lambda'}),
    Unit('nu', 'Frequency', psuedonyms={'ŒΩ'}),
    Unit('E_n', 'Energy of the nth electron orbital'),
    Unit('Z', 'Charge of the nucleus'),
    Unit('v', 'volume', 'cm**3 / milliliters'),
    Unit('m', 'mass', 'grams'),
    Unit('d', 'density', 'grams*cm**-3'),
))
