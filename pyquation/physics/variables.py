from sympy.physics.units import *
from Variable import Variable

radius = Dimension('radius', 'r')
angular_acceleration = Dimension('angular acceleration', 'angA')
angular_velocity = Dimension('angular velocity', 'angV')
angular_speed = Dimension('angular speed', 'angs')
delta_anglular_speed = Dimension('delta anglular speed', 'dangs')
delta_angle = Dimension('delta angle', 'dang')
delta_time = Dimension('delta time', 'dt')
weight = Dimension('weight', 'w')
work = Dimension('work', 'W')
drag_force= Dimension('drag force', 'R')
kinetic_energy = Dimension('kinetic energy', 'ke')
potential_energy = Dimension('potential energy', 'pe')
potential_energy_gravity = Dimension('potential energy due to gravity', 'peg')
potential_energy_spring = Dimension('potential energy in a spring', 'pes')
x = Dimension('x', 'x')
y = Dimension('y', ('y', 'h'))
z = Dimension('z', 'z')
total_energy = Dimension('total energy', 'te')
period = Dimension('period', 'T')
mech_energy = Dimension('mechanical energy', 'me')
work_against_friction = Dimension('work against friction', 'wdaf')

a    = Variable(acceleration, meters/second^2)
v    = Variable(velocity, meters/second)
r    = Variable(radius, meters)
angA = Variable(angular_acceleration, radians/second^2)
angV = Variable(angular_velocity, radians/second, {'wThing', 'ohmega'})
angs = Variable(angular_speed, radians/second, {'aThing', 'alpha'})
dangs= Variable(delta_anglular_speed, radians/second)
dang = Variable(delta_angle, radians)
dt   = Variable(delta_time, seconds)
w    = Variable(weight, newtons)
W    = Variable(work, joules)
m    = Variable(mass, kilograms)
# b    = Variable(NO idea)
f    = Variable(force, newtons)
R    = Variable(drag_force, newtons)
# vlin = Variable(linear (tangential) velocity, meters/second)
ke   = Variable(kinetic_energy, joules)
peg  = Variable(potential_energy_gravity, joules)
pes  = Variable(potential_energy_spring, joules)
# pec  = Variable(potential energy due to... the centripetal force?, joules)
g    = Variable(acceleration_due_to_gravity, meters/second^2)
y = h= Variable(y, meters)
x    = Variable(x, meters)
# k    = Variable(the spring\'s constant, Newtons/meter)
te   = Variable(total_energy, joules)
ke   = Variable(kinetic_energy, joules)
pe   = Variable(potential_energy, joules)
T    = Variable(period, revolutions/second)
t    = Variable(time, seconds)
# pos  = Variable(position, meters)
# mag  = Variable(vector magnitude)
me   = Variable(mech_energy, joules)
wdaf = Variable(work_against_friction, joules)

rot_kinetic_energy = Dimension('rotational kinetic energy', 'ker')
coef_static_friction = Dimension('coefficient of static friction', 'mu_k')
coef_kinetic_friction = Dimension('coefficient of kinetic friction', 'mu_s')

P    = Variable(power, watts)
p    = Variable(momentum, kilogram meters/second)
ker  = Variable(rot_kinetic_energy, joules)
# d    = Variable(displacement, meters)
# D    = Variable(distance, meters)
# vec  = Variable(generic position vector)
mu_k = Variable(coef_static_friction, None)
mu_s = Variable(coef_kinetic_friction, None)
N    = Variable(Magnitude of the normal force, Newtons)
imp  = Variable(Impulse, Newton seconds)
I    = Variable(moment of inertia, kilogram meters^2)
f_avg= Variable(average force over time)
tau  = Variable(torque, Newton meters)
kew  = Variable(kinetic energy in a flywheel, joules)
L    = Variable(Angular Momentum, kilogram meters^2/second)
G    = Variable('Gravitational Constant', Newtons * meters/kilograms^2
v_esc= Variable( 'Escape velocity', 'meters/second', {v_o', 'escv', 'esc_v')
M_E  = Variable('mass of the earth (or the body in question) (5.98*10^24 kg)', kilograms)
R_E  = Variable('radius of the earth (or the body in question) (6.37*10^6 m)', meters)
M_S  = Variable('Mass of the sun (or body in question)', kilograms)
sma  = Variable('semi-major axis (smallest radius of an ellipse)', meters)
ma     = Variable('major axis (largest radius of an ellipse)', meters)
        # Unit(# 'f', 'frequency', 'Hertz'),
#     ), modifiers=(
#         Modifier('_i', 'initial'),
#         Modifier('_f', 'final'),
#         Modifier('d', 'delta', False),
#         Modifier('_t', 'at time t'),
#     )
# )
